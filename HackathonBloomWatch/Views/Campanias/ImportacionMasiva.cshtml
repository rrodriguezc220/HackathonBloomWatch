@model HackathonBloomWatch.Models.Campania

@{
    ViewData["Title"] = "Importación Masiva";
}
<div class="mx-auto p-2">
    <h2 class="text-center text-green-950 fw-bold mb-4">Importación Masiva</h2>
    <form asp-action="ProcesarArchivo" method="post" enctype="multipart/form-data" class="mb-5">
        <div class="row">
            <div class="col-12 col-md-6">
                <div class="form-floating mb-3">
                    <input asp-for="NombreCampania" class="form-control" placeholder="Nombre de la Campaña" />
                    <label asp-for="NombreCampania" class="form-label">Nombre de la Campaña</label>
                    <span class="text-danger" asp-validation-for="NombreCampania"></span>
                </div>

                <div class="form-floating mb-3">
                    <input asp-for="AnioCampania" class="form-control" placeholder="Año de la Campaña" />
                    <label asp-for="AnioCampania" class="form-label">Año de la Campaña</label>
                    <span class="text-danger" asp-validation-for="AnioCampania"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="FechaProceso" class="form-control" placeholder="Fecha de Proceso" />
                    <label asp-for="FechaProceso" class="form-label">Fecha de Proceso</label>
                    <span class="text-danger" asp-validation-for="FechaProceso"></span>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="archivo">Subir Archivo (KML)</label>
                    <input type="file" name="archivo" id="archivo" class="form-control" accept=".kml" required />
                    <span class="text-danger">@Html.ValidationMessage("archivo")</span>
                </div>
                <div class="d-flex justify-content-center">
                    <input type="hidden" name="geojsonData" id="geojsonOutput" />
                    <button type="submit" class="btn btn-green-500">Procesar Archivo <i class="fa-solid fa-arrow-right"></i></button>
                </div>
            </div>
            <div class="col-12 col-md-6">
                <div class="mx-auto">
                    <div id="map" style="height: 400px; border: 1px solid #ccc;"></div>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://unpkg.com/togeojson@0.16.0/togeojson.js"></script>
    <script>
        var map = L.map('map').setView([-7.1639, -78.5003], 8);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

        var geoJsonLayer = null; // Variable para almacenar la capa actual

        document.getElementById('archivo').addEventListener('change', function(event) {
            var file = event.target.files[0];
            if (file) {
                var reader = new FileReader();
                reader.onload = function(e) {
                    var text = e.target.result;

                    try {
                        var geoJson = convertToGeoJSON(text);

                        // Guardamos el resultado en un campo oculto
                        document.getElementById('geojsonOutput').value = JSON.stringify(geoJson);

                        // Eliminar la capa anterior si existe
                        if (geoJsonLayer) {
                            map.removeLayer(geoJsonLayer);
                        }

                        geoJsonLayer = L.geoJSON(geoJson, {
                            style: function(feature) {
                                return { color: "red", weight: 2, fillOpacity: 0.5 };
                            },
                            pointToLayer: function(feature, latlng) {
                                return L.circleMarker(latlng, {
                                    radius: 6,
                                    fillColor: "red",
                                    color: "red",
                                    weight: 2,
                                    opacity: 1,
                                    fillOpacity: 0.8
                                });
                            }
                        }).addTo(map);
                        map.fitBounds(geoJsonLayer.getBounds());

                    } catch (error) {
                        alert("No se pudo visualizar el archivo.");
                    }
                };

                if (file.name.endsWith('.kml') || file.name.endsWith('.kmz')) {
                    reader.readAsText(file);
                }
            }
        });

        function convertToGeoJSON(text) {
            try {
                var parser = new DOMParser();
                var kml = parser.parseFromString(text, "text/xml");
                var geoJson = toGeoJSON.kml(kml);

                if (!geoJson || !geoJson.features || geoJson.features.length === 0) {
                    throw new Error("El archivo KML no contiene datos válidos.");
                }

                return geoJson;
            } catch (error) {
                console.error("Error al convertir KML a GeoJSON:", error);
                alert("Error al procesar el archivo. Asegúrese de subir un archivo KML válido.");
                return null;
            }
        }

    </script>
}